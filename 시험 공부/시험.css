/* 박스 모델 속성  */
width  : 박스 모델의 너비를 지정합니다.

height : 박스 모델의 높이를 지정합니다.

box-sizing : 박스 모델의 크기를 계산하는 기준을 지정합니다.

box-shadow : 박스 모델에 그림자 효과를 추가합니다.

/* 테두리 속성 */
border-style      : 상하좌우 4개 방향의 테두리 스타일을 한꺼번에 지정합니다.
border-위치-style : '위치' 자리에 top, right, bottom, left 중에서 선택해서 특정 위치의 테두리 스타일만 지정합니다.

border-width      : 상하좌우 4개 방향 테두리 두께를 한꺼번에 지정합니다.
border-위치-width : '위치' 자리에 top, right, bottom, left 중에서 선택해서 특정 위치의 테두리 두께만 지정합니다.

border-color      : 상하좌우 4개 방향 테두리 색상을 한꺼번에 지정합니다.
border-위치-color : '위치' 자리에 top, right, bottom, left 중에서 선택해서 특정 위치의 테두리 색상만 지정합니다.

border-radius      : 상하좌우 4개 방향 꼭짓점을 한꺼번에 둥글게 만듭니다.
border-위치-radius : '위치' 자리에 top-left, top-right, bottom-right, bottom-left 등을 선택해서 특정 꼭짓점만 둥글게 처리합니다.

/* 여백 속성 */
margin       : 상하좌우 4개 방향의 마진을 한꺼번에 지정합니다.
margin-위치 : '위치' 자리에 top, right, bottom, left 중에서 선택해서 특정 위치의 마진만 지정합니다.

padding      : 상하좌우 4개 방향의 패딩을 한꺼번에 지정합니다.
padding-위치 : '위치' 자리에 top, right, bottom, left 중에서 선택해서 특정 위치의 패딩만 지정합니다.

/* 레이아웃 속성 */
display                  : 화면에서 요소를 배치 방법을 지정합니다. 자주 사용하는 주요 속성으로 block, inline, inline-block, none 등이 있습니다.

float                    : 웹 요소를 왼쪽이나 오른쪽으로 배치합니다. float를 적용한 요소는 clear 속성으로 해제하지 않으면 뒤에 오는 요소도 계속 왼쪽이나 오른쪽으로 연결해서 배치됩니다.

/* 위치 지정 속성 */
left, right, top, bottom : 기준 위치와 요소 사이에 상하좌우 얼마나 떨어져 있는지 지정합니다.
position                 : 웹 요소의 위치를 지정합니다. 속성값으로 static, relative, absolute, fixed가 있습니다.

/* 스타일 시트 */
브라우저 기본 스타일 : 웹 브라우저에 웹 문서를 표시할 때 브라우저에서 기본으로 사용하는 스타일입니다.
인라인 스타일        : STYLE 속성을 사용해 필요한 요소에 스타일을 직접 지정합니다.
내부 스타일 시트     : 문서 앞부분에 문서에서 사용하는 스타일을 모아서 함께 정의하고 관리합니다.
외부 스타일 시트     : 문서에서 사용하는 스타일을 모아서 따로 파일로 저장한 후 연결해서 사용합니다.

/* CSS 기본 선택자 */
전체 선택자   : 문서의 모든 요소에 스타일을 적용합니다. [작성 예시 : * { MARGIN:0;} ]

타입 선택자   : 특정 태그를 사용한 모든 요소에서 스타일을 적용합니다. [작성 예시 : p { font-style: italic;} ]

클래스 선택자 : 특정 부분만 선택해서 문서 안에 여러 번 적용 합니다. 마침표(.)를 붙여서 사용합니다. [작성 예시 : .bg { background color: #ddd;} ]

id 선택자     : 특정 부분만 선택해서 문서 안에서 한 번만 적용합니다. #을 붙여서 사용합니다. [작성 예시 : #container { width: 500px;} ]

그룹 선택자   : 여러 요소에 같은 스타일을 적용할 때 사용합니다. [작성 예시 : h1, h2 { text-align: center;} ]

/* 스타일 우선순위 */
1. 사용자 스타일 -> 제작자 스타일 -> 브라우저 기본 스타일
2. [적용 범위] !important -> 인라인 스타일 -> id 스타일 -> 클래스 스타일 -> 타입 스타일
3. [소스 작성 순서] 나중에 작성한 스타일이 먼저 작정한 스타일을 덮는다.

/* 연결 선택자 */
하위 선택자 : [형식 : 상위요소 하위요소] : 상위 요소에 포함된 모든 하위 요소를 선택합니다.

자식 선택자 : [형식 : 부모요소 > 자식요소] : 부모 요소에 포함된 자식 요소만 선택합니다.

인접 형제 선택자 : [형식 : 요소1 + 요소2] : 요소1 이후 맨 먼저 오는 형제 요소를 선택합니다.

형제 선택자 : [형식 : 요소1 ~ 요소2] : 요소1과 형제인 모든 요소를 선택합니다.

/* 속성 선택자 */
[종류]       | 선택 요소                                        | [예시]
[속성]       : 해당 속성이 있는 요소                            : [required]
[속성 = 값]  : 지정한 속성값이 있는 요소                        : [target = _blank]
[속성 ~= 값] : 지정한 속성값이 포함된 요소(단어별)              : [class ~= button]
[속성 |= 값] : 지정한 속성값이 포함된 요소(하이픈 포함, 단어별) : [title |= us]
[속성 ^= 값] : 지정한 속성값으로 시작하는 요소                  : [title ^= eng]
[속성 $= 값] : 지정한 속성값으로 끝나는 요소                    : [href $= xls]
[속성 *= 값] : 지정한 속성값의 일부가 일치하는 요소             : [href *= w3]

/* 가상 클래스 */
:link     - 방문하지 않은 링크에 스타일을 적용합니다.
:visited  - 방문했던 링크에 스타일을 적용합니다.
:hover    - 지정한 요소에 마우스 포인터를 올려놓을 때 스타일을 적용합니다.
:active   - 지정한 요소를 활성화했을 때 스타일을 적용합니다.
:focus    - 지정한 요소에 초점이 맞춰졌을 때 스타일을 적용합니다.
:target   - 앵커 대상에 스타일을 적용합니다.
:enabled  - 지정한 요소를 사용할 수 있는 상태일 때 스타일을 적용합니다.
:disabled - 지정한 요소를 사용할 수 없는 상태일 때 스타일을 적용합니다.
:checked  - 선택한 요소의 스타일을 적용합니다.
:not      - 지정한 요소가 아닐 때 선택해서 스타일을 적용합니다.

/* 구조 가상 클래스 */
:only-child           : 부모 안에 자식 요소가 하나뿐일 때 자식요소를 선택합니다.
A:only-of-type        : 부모 안에 A 요소가 하나뿐일 때 선택합니다.
:first-child          : 부모 안에 있는 모든 요소 중에서 첫 번째 자식 요소를 선택합니다.
:last-child           : 부모 안에 있는 모든 요소 중에서 마지막 자식 요소를 선택합니다.
A:first-of-type       : 부모 안에 있는 A 요소 중에서 첫 번째 요소를 선택합니다.
A:last-of-type        : 부모 안에 있는 A 요소 중에서 마지막 요소를 선택합니다.
:nth-of-type(n)       : 부모 안에 있는 모든 요소 중에서 n번째 자식 요소를 선택합니다.
:nth-last-child(n)    : 부모 안에 있는 모든 요소 중에서 끝에서 n번째 자식 요소를 선택합니다.
A:nth-of-type(n)      : 부모 안에 있는 A 요소 중에서 n번째 요소를 선택합니다.
A:nth-last-of-type(n) : 부모 안에 있는 A 요소 중에서 끝에서 n번째 요소를 선택합니다.

/* 가상 요소 */
::first-line    - 첫번째 줄을 선택합니다.
::first-letter  - 줄에서 첫 번째 글자를 선택합니다.
::before        - 특정 요소의 앞에 내용이나 스타일을 추가합니다.
::after         - 특정 요소의 뒤에 내용이나 스타일을 추가합니다.

/* 미디어 쿼리의 속성 */
width, height : 웹 페이지의 가로 너비, 세로 높이
min-width, min-height : 웹 페이지의 최소 너비, 최소 높이
max-width, max-height : 웹 페이지의 최대 너비, 최대 높이
device-width, device-height : 단말기의 가로 너비, 세로 높이
min-device-width, min-device-height : 단말기의 최소 너비, 최소 높이
max-device-width, max-device-height : 단말기의 최대 너비, 최대 높이
orientation: portrait : 단말기의 세로 모드
orientation: landscape : 단말기의 가로 모드

/* 플렉스 박스 레이아웃의 속성 */
종류            |                         설명                                  | 속성값
display         : 플렉스 컨테이너를 지정합니다.                                 | flex, inline-flex
flext-direction : 플렉스 항목에서 주축과 방향을 지정합니다.                     | row, row-reverse, column, column-reverse
flex-wrap       : 컨테이너 너비보다 항목이 많을 경우 줄 바꿈 여부를 지정합니다. | nowrap, wrap, wrap-reverse
flex-flow       : 배치 방향과 줄 바꿈을 한번에 지정합니다.                      | flex-direction 속성값과 flex-wrap 속성값 사용
justify-content : 주축에서 플렉스 항목 정렬 방법을 지정합니다.                  | flex-start, flex-end, center, space-between, space-around
align-items     : 교차축에서 플렉스 항목 정렬 방법을 지정합니다.                | flex-start, flex-end, center, baseline, stretch
align-self      : 특정 플렉스 항목의 정렬 방법을 지정합니다.                    | flex-start, flex-end, center, baseline, stretch
align-content   : 여러 줄일 때 교차축 정렬 방법을 지정합니다.                   | flex-start, flex-end, center, space-between, space-around, stretch
flex            : 플렉스 항목의 너비를 줄이거나 늘립니다.                       | 1개에서 3개까지의 값, auto, initial

/* CSS 그리드 레이아웃의 속성과 함수 */
종류                  | 설명                                                          | 속성값
display               | 그리드 컨테이널르 지정합니다.                                 | grid, inline-grid
grid-template-columns | 칼럼을 지정합니다.                                            | 크깃값
grid-template-rows    | 줄 높이를 지정합니다.                                         | 크깃값
grid-column-gap       | 칼럼과 칼럼 사이의 간격을 지정합니다.                         | 크깃값
grid-row-gap          | 줄과 줄 사이의 간격을 지정합니다.                             | 크깃값
grid-gap              | 칼럼과 줄 사이의 간격을 한꺼번에 지정합니다.                  | 크깃값

grid-column-start     | 칼럼 시작의 라인 번호를 지정합니다.                           | 숫자
grid-column-end       | 칼럼 마지막의 라인 번호를 지정합니다.                         | 숫자
grid-column           | 칼럼 시작 번호와 끝 번호 사이에 슬래시(/)를 넣어 사용합니다.  | 숫자
grid-row-start        | 줄 시작의 라인 번호를 지정합니다.                             | 숫자
grid-rows-end         | 줄 마지막의 라인 번호를 지정합니다.                           | 숫자
grid-row              | 줄 시작 번호와 줄 끝 번호 사이에 슬래시(/)를 넣어 사용합니다. | 숫자

grid-area             | 템플릿 이름을 지정합니다.                                     | X
grid-template-areas   | grid-area를 사용해 템플릿 그리드 만듭니다.                    | X

minmax( )             | 최솟값과 최댓값을 지정하는 함수입니다.                         | 크깃값, auto
repeat( )             | 같은 값을 여러 번 반복할 때 사용하는 함수입니다.               | 크깃값, auto-fill, auto-fit

-------------------------------------------------

CSS 이론

CSS(Cascading Style Sheets)
마크업 언어(HTML)가 실제로 화면에
표시되는 방법(모양, 색상, 크기)을 기술하는 언어.
HTML 코드가 화면에 어떤 스타일로 보여질지 지정하는 언어

CSS Selector(CSS 선택자)
선택자란?
현재 HTML 문서 내에서 특정한 요소를 선택하는 문자 또는 문자열.

태그 선택자(태그명)
현재 HTML 문서 내에 같은 태그를 선택하는 선택자
작성법 | 태그명{CSS 코드;}

ID 선택자(#)
HTML 문서 내에서 id 속성 값이 일치하는 요소를 선택하는 선택자
(중요!) id 속성 값은 페이지 내에서 유일해야 한다
-> 하나의 HTML 문서 내에서 중복되는 id가 존재해선 안된다
작성법 | #ID속성값{CSS 코드;}

동시 선택자(,)
작성법 | 요소, 요소, 요소{CSS 코드;}

CLASS 선택자(.)
HTML 문서 내에서 같은 class 속성 값을 가진 요소를 모두 선택하는 선택자
id는 중복 X, class 중복 O
작성법 | .CLASS속성값{CSS 코드;}

모든 요소 선택자(*)
모든 요소를 선택하는 선택자 (단독 또는 다른 선택자와 함께 사용 가능)
작성법 | *{CSS 코드;}

기본 속성 선택자
특정 속성이 작성된 요소를 선택하는 선택자
작성법 | 선택자[속성명="속성값"] {CSS 코드;}

자식 선택자
지정된 요소 바로 하위에 존재하는 요소를 선택하는 선택자
작성법 | 선택자1(부모 요소) > 선택자2(자식 요소){CSS 코드;}
-> 선택자1(부모) 하위에 존재하는 선택자2(자식) 요소를 모두 선택

후손(자손) 선택자 ( 띄어쓰기 )
지정된 요소의 하위에 존재하는 모든 요소를 선택하는 선택자
자식 : 1단계 아래(하위)
후손 : n단계 아래 모두
작성법 | 선택자1 선택자2 {CSS 코드;}
-> 선택자1의 후손 중 선택자2를 모두 선택

반응 선택자(active / hover)
사용자의 움직임에 반응하여 선택되는 선택자
선택자:active -> 선택된 요소를 클릭하고 있을 경우
선택자:hover  -> 선택된 요소에 마우스를 올리고 내릴 경우
-> 올릴 경우 선택자:hover에 작성된 CSS코드가 적용
-> 내릴 경우 이전 상태로 돌아감
작성법 | 선택자:active 또는 hover

상태 선택자
입력 양식 관련 태그(input, input 관련 태그) 상태에 따라 선택하는 선택자
:focus    -> 요소에 초점이 맞춰진 상태인 경우 선택
:checked  -> 요소가 체크 되었을 때 선택(radio, checkbox)
:enabled  -> 요소가 사용 가능한 상태일 때 선택 (enabled : 활성화 상태(사용 가능, 기본값))
:disabled -> 요소가 사용 불가능한 상태일 때 선택 (disabled : 비활성화 상태(사용 불가능))
작성법 | 

동위 선택자
동위 관계(동등한 위치의 관계 == 형제 관계)에서 다음에(뒤에) 위치한 요소를 선택하는 선택자
작성법 |
A
B (1)
B (2)
1) A를 기준으로 바로 다음에 존재하는 B 요소를 하나(1) 선택 : +
A + B {CSS 코드;}

2) A를 기준으로 다음에 오는 모든 B 요소(1), (2) 선택 : ~ (Tilde)
A ~ B {CSS 코드;}

문자열 속성 선택자
속성 값의 문자열을 확인하여 스타일 적용하는 방식의 선택자
1) 선택자[속성명 ~= "특정값"] {CSS 코드;}
-> 띄어쓰기로 구분되어있는 여러 속성 값이 작성된 속성 중
속성 값이 특정 값을 단어로 포함하는 요소를 선택

2) 선택자[속성명 |= "특정값"] {CSS 코드;}
-> 속성 값이 특정 값을 단어로 포함하는 요소를 선택
  단, "-" 기호로 구분, "-" 앞의 내용이 동일해야 한다.

3) 선택자[속성명 ^= "특정값"] {CSS 코드;}
(^ : 캐럿)
-> 속성 값이 특정 값으로 시작하는 요소를 선택

4) 선택자[속성명 $= "특정값"] {CSS 코드;}
-> 속성 값이 특정 값으로 끝나는 요소를 선택

5) 선택자[속성명 *= "특정값"] {CSS 코드;}
-> 속성 값이 특정 값을 포함하는 요소를 선택

일반 구조 선택자
특정 요소의 자식 요소(형제 관계 요소)를 선택하는 선택자
- 형제 관계에 있는 요소 중 특정 요소만을 선택
- (중요) 위치를 기준 구분함

형태 구조 선택자
특정 요소의 자식 요소(형제 관계 요소)를 선택하는 선택자
- 형제 관계에 있는 요소 중 특정 요소만을 선택
- (중요) 선택된 요소를 기준으로 구분함

부정 선택자 (선택자1:not(선택자2))
괄호 내 선택자를 제외한 나머지 요소를 선택
(Java == !(논리 부정))

기타 선택자

특정 요소의 자식이 하나밖에 없을 때 선택
:only-child

특정 요소의 자식 중 지정된 형태와 같은 자식 요소가 하나만 있을 경우 선택
:only-of-type

자식 노드가 없는 요소를 선택
- 노드(Node)의 개념
태그, 글자, 띄어쓰기 모두를 노드라고 함.
:empty

CSS 선택자 우선 순위
1순위 : !important; 붙은 css 속성
2순위 : inline-style 속성 (테그에 직접 작성하는 style속성)
3순위 : 아이디 선택자
4순위 : 클래스 선택자
5순위 : 태그 선택자

------------------------------------------------------------

레이아웃(layout)
사전적 의미 : 배치, 정리
기술적 의미 : 구성 요소(html)를 제한된 공간(html body태그)에 효율적으로 배치하는 것

화면 배치 방법(형식) : display 속성
요소가 화면에 어떻게 보여질지 형식을 지정하는 속성
- block : 화면을 수직 분할(행을 나눔) : width, height 사용 O
- inline : 화면을 수평 분할(한 행의 열(컬럼)을 나눔) : width, height 사용 X
- inline-block : inline의 수평 분할 + block의 크기 조절
- none : 화면에 요소가 표시되지 않으나 존재는 하고 있는 상태
- flex : 요소의 정렬되는 방향, 간격을 유연하게 처리하는 형식

화면(영역) 분할

상하 2분할
준비물
- 감싸고 있는 영역 요소
- 내부를 분할할 요소
- display : block
- 크기 지정 단위(px, %)
<!-- 감싸고 있는 영역 요소 -->
<div id="container-1">
<!-- 내부를 분할할 요소 -->
<div></div>
<div></div>
</div>

상하 3분할
1) 감싸는 영역
- id : container-2
- 높이 : 440px;
- 너비 : 300px;

2) 내부 분할 영역 비율 : 15 : 35 : 50

<div id="container-2">
<div></div>
<div></div>
<div></div>
</div>

좌우 2분할
준비물
- 감싸고 있는 영역 요소
- 내부를 분할할 요소
- display : inline-block
- 크기 지정 단위(px, %)
<div id="container-3">
<div class="area3">1</div><div class="area4">2</div>
</div>

display : none
- 화면에 요소가 표시되지 않으나 존재는 하고 있는 상태
- visibility : hidden; -> 요소를 투명한 상태로 표시


요소의 영역(여백) 관련 속성
모든 html 요소는 총 4가지의 영역으로 구성되어 있다.

1. content
- 요소의 내용이 작성되어지는 영역
(시작, 종료 태그 사이에 작성되는 내용이 출력되는 영역)

2. padding
- content와 border 사이의 영역

3. border
- 요소의 테두리가 지정되는 영역
- content보다 바깥쪽에서 감싸고 있음

4. margin
- 다른 요소와의 간격을 지정하는 영역

box-sizing
요소의 전체 크기가 가로 세로 300px인 정사각형
(박스 모델의 크기를 계산하는 기준을 지정합니다.)

* box-sizing 속성
- width / height 속성이 적용되는 범위를 지정하는 속성

1) content-box (기본값) : width / height 적용 범위를 content로 한정

2) border-box :
width / height 적용 범위를
border + padding + content의 크기 합산과 동일하도록 계산해서
content의 크기를 자동으로 지정


요소 정렬 스타일(float / clear)
float(뜨다, 띄우다, 흐르다) : 요소를 띄워서 좌/우로 정렬하는 속성

clear : float로 인해 띄워져 있는 상태를 해제하는 속성
(float 사용 시 겹침 문제가 발생하는데 이를 해결할 때 사용)

배치 관련 스타일(position)
position은 요소의 위치를 지정하는 속성

position : relative;  (상대적인)
- 지정된 요소 내부에 다른 요소가 상대적인 위치를 지정할 수 있도록 기준이 되게 만드는 속성.

- 내부에 작성되는 요소에 위치 지정 시 top, bottom, left, right 속성을 사용할 수 있음.

position : absolute; (절대적인)
- 기본 요소의 배치 순서를 무시하고 지정된 절대 위치에 요소를 배치함.

position : fixed; (고정된)
- 항상 고정된 위치에 요소를 배치함. (화면이 움직이든 말든 항상 같은 위치)

position : sticky;
- 요소가 보여지는 화면을 벗어났을 때 스티커 처럼 화면에 붙여서 고정된 위치를 가지게 만듦.
(fixed의 응용 버전)

* z-index
- position 속성에 의해여 겹쳐진 요소들의 순서를 지정하는 속성

text-decoration : 텍스트에 줄을 긋는 속성
작성법
text-decoration: underline; (아랫줄 긋기)
text-decoration: line-through; (중간줄 긋기)
text-decoration: overline; (윗줄 긋기)
text-decoration: none; (줄 없애기)

text-align : 내부에 작성된 글 또는 inline요소를 정렬
text-align은 감싸는 요소가 display가 inline인 경우 적용되지 않는다.

line-height : 줄 간격(장평)을 지정하는 속성
한 줄의 높이를 지정하는 속성 (줄 사이 간격 지정 X)
* 줄의 높이(line-height)가 글자의 크기(font-size)보다 큰 경우
글자는 해당 줄 세로 가운데에 배치된다

letter-spacing : 글자 사이 간격(자간) 지정 속성
작성법 | letter-spacing: 1px;   (px 앞에 - 넣으면 자간 좁게)


글꼴 관련 스타일

font-size : 글꼴의 크기를 지정하는 속성
* 고정 크기 단위
px : 픽셀(화면 해상도)
pt : 포인트(1pt = 0.35mm)

* 가변 크기 단위
% : 상위 요소 크기에 대한 백분율
em : 상위 요소의 글꼴 크기에 대한 비율(1em == 100%, 1.2em == 120%)

font-weight : 글꼴의 굵기(두께)를 지정하는 속성
bold : 굵게 (700)
normal : 보통(기본값, 400)

bolder : 부모 요소보다 굵게
lighter : 부모 요소보다 얇게

number(100~900, 100단위) : 가중치
- 숫자가 클수록 두꺼움
- 폰트에서 지원하는 가중치에 따라 표현되는 굵기가 다름

-> normal, bold만 지원하는 폰트가 있을 경우
100~500 : normal
600~900 : bold로 처리

font-family : 글꼴을 지정하는 속성


변형 관련 스타일

2차원 변형

좌우로 움직이기
transform : translateX(100px); /* X축 방향으로 100px만큼 이동 */

상하로 움직이기
transform : translateY(100px); /* Y축 방향으로 100px만큼 이동 */

대각선 움직이기
transform : translate(100px, -100px);

가로 방향 확대/축소
transform: scaleX(2); /* 가로 방향으로 2배만큼 확대 */

세로 방향 확대/축소
transform: scaleY(2); /* 세로 방향으로 2배만큼 확대 */

요소 확대/축소(대각선)
transform: scale(1.2, 1.2);
/* X, Y [1.2는 1.2배 확대 / 0.5는 50% 축소] */

요소 회전
transform: rotate(90deg);

3차원 변형

x, y, z 축 이동
perspective(관점, 원근법) : 원근법 적용 
perspective(길이)
- 길이는 원근법 적용 거리
transform: perspective(300px) translate3d(50px,50px,100px);

x축 회전
transform: perspective(500px) rotateX(180deg); /* 상하 반전 */

y축 회전
transform: perspective(500px) rotateY(180deg); /* 좌우 반전 */

z축 회전
transform: perspective(500px) rotateZ(45deg);

x,y,x축 회전
rotate3d(x, y, z, 회전각도)
- x, y, z는 0 ~ 1(벡터) 사이 값
transform: perspective(500px) rotate3d(0.5, 0.5, 0.5, 45deg);

변형 사이에 지연시간 추가하기
/* 변형 기간(변형 되는데 걸리는 시간 지정) */
transition-duration: 1s; /* 1초 */

스타일 변형 진행 속도 조정
transition-timing-function: linear;

스타일 변형 딜레이(일정 시간 후 변형)
/* 변형되는 시간을 지연(늦게 변하기 시작) */
transition-delay: 1s;